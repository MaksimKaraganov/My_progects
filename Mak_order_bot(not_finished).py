import telebot
from telebot import types 
import sqlite3 
import datetime
import requests
from bs4 import BeautifulSoup
from fake_headers import Headers

user_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
item2 = types.KeyboardButton("–£—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É")
item3 = types.KeyboardButton("–û–±–æ –º–Ω–µ")
user_main.add(item1, item2, item3)

admin = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
item2 = types.KeyboardButton("–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
item3 = types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫")
item4 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É")
item5 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –∫–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
item6 = types.KeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –≤–µ—Ä—Å–∏—é")
admin.add(item1, item2, item3, item4, item5, item6)

markup_send = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
markup_send.add(item1, item2)

markup_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
markup_back.add(item1)

grafic = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("5 - 2")
item2 = types.KeyboardButton("2 - 2")
item3 = types.KeyboardButton("–î—Ä—É–≥–æ–π —Å–ª—É—á–∞–π")
grafic.add(item1, item2, item3)

order_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–ë—É—Ä–≥–µ—Ä—ã")
item2 = types.KeyboardButton("–ó–∞–≤—Ç—Ä–∞–∫–∏")
item3 = types.KeyboardButton("–ö–æ–º–±–æ –Ω–∞–±–æ—Ä—ã")
item4 = types.KeyboardButton("–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏")
item5 = types.KeyboardButton("–°–∞–ª–∞—Ç—ã –∏ —Ä–æ–ª—ã")
item6 = types.KeyboardButton("–î–µ—Å–µ—Ä—Ç—ã")
item7 = types.KeyboardButton("–ù–∞–ø–∏—Ç–∫–∏")
item8 = types.KeyboardButton("–°–æ—É—Å—ã")
order_main.add(item1, item2, item3, item4, item5, item6, item7, item8)

smth_else = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–ß—Ç–æ-—Ç–æ –µ—â—ë")
item2 = types.KeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–∫–∞–∑")
smth_else.add(item1, item2)

def main():
    header = Headers(
    headers=True 
    )
    token = 'TOKEN'
    password = 'Admin'
    chat_id = 5209538522
    admin_id = 5209538522#–∞–π–¥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ hr 
    grpoup_id = -743773007
    bot = telebot.TeleBot(token)
    @bot.message_handler(commands=['start'])    
    def welcome(message):
        if " " in message.text:
            referrer_candidate = message.text.split()[1]
            conn_referrer_add = sqlite3.connect('mac_detabase.db', check_same_thread=False)
            cursor_referrer_add = conn_referrer_add.cursor()
            info = cursor_referrer_add.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id, )) 
            if info.fetchone() is None: 
                database(message)
                count =  cursor_referrer_add.execute("select `count` from `referal` WHERE `name` = ?",(referrer_candidate,)).fetchone()[0] + 1
                cursor_referrer_add.execute("UPDATE `referal` SET `count` = ? WHERE `name` = ?", (count, referrer_candidate))
                cursor_referrer_add.execute("UPDATE `users` SET `ref_name` = ? WHERE `user_id` = ?", (referrer_candidate, message.from_user.id ))
                conn_referrer_add.commit()
            else:        
                bot.send_message(chat_id, f'–ü–µ—Ä–µ—à—ë–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, —Ö–æ—Ç—è –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º —Ä–∞–Ω–µ–µ {message.from_user.id}\n @{message.from_user.username}')
                conn_referrer_add.close()
                bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>ü§ñ, –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤–æ –í–∫—É—Å–Ω–æ-–∏ —Ç–æ—á–∫–∞".format(message.from_user, bot.get_me()),parse_mode='html', reply_markup=user_main)
        else:
            database(message)
            bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>ü§ñ, –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤–æ –í–∫—É—Å–Ω–æ-–∏ —Ç–æ—á–∫–∞".format(message.from_user, bot.get_me()),
       parse_mode='html', reply_markup=user_main)

    @bot.message_handler(content_types=['text'])
    def main_menu(message):
        if message.text == '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑':
            user_order = []
            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=order_main)
            bot.register_next_step_handler(message, order, user_order)
        elif message.text == '–£—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É': #—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∑–Ω–∞—Ç—å –≥–¥–µ —Ç—ã –∂–∏–≤—ë—à—å
            bot.send_message(message.from_user.id, '–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—ã—à–µ —Ä–µ–∑—é–º–µ')
            bot.register_next_step_handler(message, new_resume)
        elif message.text == '–û–±–æ –º–Ω–µ':
            bot.send_message(message.from_user.id, '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ')
        elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
            bot.send_message(message.chat.id, '–í—ã –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º –º–µ–Ω—é', reply_markup=user_main)

        elif message.text == password and (message.chat.id == chat_id ):
            bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=admin)
        elif message.text == '–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö' and (message.chat.id == chat_id ):
            conn_us_info = sqlite3.connect('mac_detabase.db', check_same_thread=False)
            cursor_us_info = conn_us_info.cursor()
            users = cursor_us_info.execute("select * from `users`").fetchall()
            conn_us_info.close()
            for row in users:
                bot.send_message(message.chat.id, f'ID - {row[0]}\n –ò–º—è - {row[1]}\n –§–∞–º–∏–ª–∏—è - {row[2]}\n –ù–∏–∫ - {row[3]}\n –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - {row[4]}\n –†–µ—Ñ–µ—Ä–∞–ª - {row[5]}')
            bot.send_message(message.chat.id, '–≠—Ç–æ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
        elif message.text == '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É' and (message.chat.id == chat_id ):
            bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
            bot.register_next_step_handler(message, rassilka_step)
        elif message.text == '–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫' and (message.chat.id == chat_id ):
            conn_basa_rassilka = sqlite3.connect('mac_detabase.db', check_same_thread=False)
            cursor_basa_rassilka = conn_basa_rassilka.cursor()
            bot.send_message(message.chat.id, '–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫')
            sended = cursor_basa_rassilka.execute("select * from `basa_rassilka`").fetchall()
            conn_basa_rassilka.close()
            for row in sended:
                try:
                    bot.send_photo(message.chat.id, row[1], caption=f'üìù{row[0]}\n‚è±{row[2]}')
                except:
                    bot.send_message(message.chat.id, f'üìù{row[0]}\n‚è±{row[2]}')
        elif message.text == '–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É' and (message.chat.id == chat_id ):
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º')
            bot.register_next_step_handler(message, referali_create)
        elif message.text == '–£–∑–Ω–∞—Ç—å –∫–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤' and (message.chat.id == chat_id ):
            ref_info(message)
        elif message.text == '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –≤–µ—Ä—Å–∏—é' and (message.chat.id == chat_id ):
            bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –≤–µ—Ä—Å–∏—é', reply_markup=user_main)
        
        elif message.text == 'GEO':
            keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
            keyboard.add(button_geo)
            bot.send_message(message.from_user.id, 'GEO', reply_markup=keyboard)
            bot.register_next_step_handler(message, geo)

        else:
            bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É')

    @bot.callback_query_handler(func=lambda call: True)
    def answer(call):#–≤—ã–∫–∏–Ω—É—Ç—å –Ω–∞—Ö–µ—Ä
        if call.data == 'answer_from_chat':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=call.message.text, reply_markup=None)
            bot.send_message(call.message.chat.id,
                         call.from_user.first_name + '(@' + call.from_user.username + ')' + ' –í–∑—è–ª –∑–∞–∫–∞–∑')
            order_text=call.message.text.replace("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ", '')
            conn_order_update = sqlite3.connect('mac_detabase.db', check_same_thread=False)
            cursor_order_update = conn_order_update.cursor()
            cursor_order_update.execute("UPDATE `order` SET `worker_id` = ?, `worker_tag` = ?, `status` = ?  WHERE `order_info` = ?", (call.from_user.id, call.from_user.username, 'Took', order_text))
            conn_order_update.commit()
            conn_order_update.close()

    def geo(message):
        bot.send_message(message.chat.id,message.location.longitude)
        bot.send_message(message.chat.id,message.location.latitude, reply_markup=user_main)

    def order(message, user_order):
        if message.text == '–ë—É—Ä–≥–µ—Ä—ã':
            menu = 'burgers'
            send_meny(message, menu, user_order)
        elif message.text == '–ó–∞–≤—Ç—Ä–∞–∫–∏':
            menu = 'zavtrak'
            send_meny(message, menu, user_order)
        elif message.text == '–ö–æ–º–±–æ –Ω–∞–±–æ—Ä—ã':
            menu = 'makkombo'
            send_meny(message, menu, user_order)
        elif message.text == '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏':
            menu = 'kartofel-i-startery'
            send_meny(message, menu, user_order)
        elif message.text == '–°–∞–ª–∞—Ç—ã –∏ —Ä–æ–ª—ã':
            menu = 'salaty-i-rolly'
            send_meny(message, menu, user_order)
        elif message.text == '–î–µ—Å–µ—Ä—Ç—ã':
            menu = 'deserty-i-vypechka'
            send_meny(message, menu, user_order)
        elif message.text == '–ù–∞–ø–∏—Ç–∫–∏':
            menu = 'napitki-i-koktejli'
            send_meny(message, menu, user_order)
        elif message.text == '–°–æ—É—Å—ã':
            menu = 'sousy'
            send_meny(message, menu, user_order)
        elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
            bot.send_message(message.chat.id, '–í—ã –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º –º–µ–Ω—é', reply_markup=user_main)
        else:
            bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É')
            bot.register_next_step_handler(message, order, user_order)

    def send_meny(message, menu, user_order):
        link = f'https://vkusnoitchka.ru/{menu}/'
        user_agent = header.generate()
        response = requests.get(link, headers=user_agent)
        response.encoding = 'utf-8'
        soup = BeautifulSoup(response.text, 'lxml') 
        burgers = soup.findAll('div', class_='h5')
        photoes = soup.find_all('div', class_='item-image')
        counter = 0
        food = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for photo in photoes:
            photo = photo.img['data-lazy-src'].replace("-465x465",'')
            bot.send_photo(message.from_user.id, photo, caption=burgers[counter].text)
            item = types.KeyboardButton(f'{burgers[counter].text}')
            food.add(item)
            counter = counter + 1
        bot.send_message(message.from_user.id, '–ß—Ç–æ –±—É–¥–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?', reply_markup=food)
        bot.register_next_step_handler(message, order_from_user, user_order)

    def order_from_user(message, user_order):
        user_order.append(message.text)
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –µ—â—ë?', reply_markup=smth_else)
        bot.register_next_step_handler(message, order_from_user_else_step, user_order)
    
    def order_from_user_else_step(message, user_order):
        if message.text == '–ß—Ç–æ-—Ç–æ –µ—â—ë':
            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=order_main)
            bot.register_next_step_handler(message, order, user_order)
        if message.text == '–ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–∫–∞–∑':
            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton( text='–í–∑—è—Ç—å',  callback_data='answer_from_chat')
            markup.add(btn)
            bot.send_message(message.from_user.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑", reply_markup=user_main)
            bot.send_message(grpoup_id, f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ {user_order}", reply_markup=markup)
            conn_order = sqlite3.connect('mac_detabase.db', check_same_thread=False)
            cursor_order = conn_order.cursor()
            cursor_order.execute('INSERT INTO `order`(order_info, user_id, user_tag) VALUES (?, ?, ?)', (str(user_order), message.from_user.id, message.from_user.username))
            conn_order.commit()
            conn_order.close()

    def new_resume(message):
        link_on_resume = message.text
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å', reply_markup=grafic)
        bot.register_next_step_handler(message, new_send_admin, link_on_resume)

    def new_send_admin(message, link_on_resume):
        grafic = message.text
        bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É', reply_markup=user_main)
        bot.send_message(admin_id, f'–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É\n—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ: {link_on_resume}\n –∂–µ–ª–∞–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {grafic}')

    def rassilka_step(message):
        message_important = message
        bot.send_message(message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup= markup_send)
        bot.register_next_step_handler(message, rassilka, message_important)
        
    def rassilka(message, message_important):
        if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å':
            try:
                conn_rassilka = sqlite3.connect('mac_detabase.db', check_same_thread=False)
                cursor_rassilka = conn_rassilka.cursor()
                idphoto = 0
                message = message_important
                dt = datetime.datetime.now() 
                dt = dt.strftime(dt.strftime("Day: %d/%m/%Y  time: %H:%M:%S"))
                users_id = cursor_rassilka.execute("select `user_id` from `users`").fetchall()
                try:
                    idphoto = message.photo[0].file_id
                    text = message.caption
                    for row in users_id:
                        try:
                            bot.send_photo(row[0], idphoto, caption = text)
                        except:
                            bot.send_message(message.chat.id, f'–î–æ–±–∞–≤–∏–ª –≤ —á—Å - {row[0]}')
                except:
                    text = message.text
                    for row in users_id:
                        try:
                            bot.send_message(row[0], text)
                        except:
                            bot.send_message(message.chat.id, f'–î–æ–±–∞–≤–∏–ª –≤ —á—Å - {row[0]}')
                bot.send_message(message.chat.id, '—Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', reply_markup = admin)
                cursor_rassilka.execute('INSERT INTO basa_rassilka (text, photo, data) VALUES (?, ?, ?)', (text, idphoto, dt))
                conn_rassilka.commit()
                conn_rassilka.close()
                bot.send_message(message.chat.id, '—Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
            except:
                bot.send_message(message.chat.id, '–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', reply_markup = admin)
        elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
            bot.send_message(message.chat.id, '–≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å', reply_markup = admin)
        else:
            bot.send_message(message.chat.id, '–Ω–∞–∂–º–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É')
            bot.register_next_step_handler(message, rassilka, message_important)

    def referali_create(message):
        name = message.text
        if name != '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
            conn_referali_create = sqlite3.connect('mac_detabase.db', check_same_thread=False)
            cursor_referali_create = conn_referali_create.cursor()
            info = cursor_referali_create.execute('SELECT * FROM referal WHERE name=?', (name, )) 
            if info.fetchone() is None: 
                cursor_referali_create.execute('INSERT INTO referal (name, count) VALUES (?, ?)', (name, 0))
                conn_referali_create.commit()
                bot.send_message(message.chat.id, f'https://t.me/Armany_by_maks_bot?start={name}\n \n–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
            else:
                bot.send_message(message.chat.id, f'–ò–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –ø–æ –ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ')
                bot.register_next_step_handler(message, referali_create)
            conn_referali_create.close()
        else:
            bot.send_message(message.chat.id, '–í—ã –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º –º–µ–Ω—é', reply_markup=admin)

    def ref_info(message):
        conn_ref_info = sqlite3.connect('mac_detabase.db', check_same_thread=False)
        cursor_ref_info = conn_ref_info.cursor()
        referal = cursor_ref_info.execute("select * from `referal`").fetchall()
        conn_ref_info.close()
        for row in referal:
            bot.send_message(message.chat.id, f'–ò–º—è —Å—Å—ã–ª–∫–∏ - {row[0]}\n –ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ - {row[1]}\n —Å–∞–º–∞ —Å—Å—ã–ª–∫–∞ - https://t.me/AliExprssSearch_bot?start={row[0]}')
        bot.send_message(message.chat.id, '–≠—Ç–æ –≤—Å–µ –≤–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏')  

    def database(message):
        conn_add_user = sqlite3.connect('mac_detabase.db', check_same_thread=False)
        cursor_add_user = conn_add_user.cursor()
        info = cursor_add_user.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id, )) 
        if info.fetchone() is None: 
            dt = datetime.datetime.now() 
            dt = dt.strftime(dt.strftime("%d-%m-%Y"))
            cursor_add_user.execute('INSERT INTO users (user_id, user_name, user_surname, username, datetime) VALUES (?, ?, ?, ?, ?)', (message.from_user.id , message.from_user.first_name, message.from_user.last_name, message.from_user.username, dt))
            conn_add_user.commit()
        conn_add_user.close()

    bot.polling()

if __name__ == '__main__':
    main()