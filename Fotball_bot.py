import sqlite3
import telebot
from telebot import types
import traceback
import datetime
import time
import random
import requests
from bs4 import BeautifulSoup
import difflib
import schedule
from threading import Thread

user_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–Ω–æ–≤–æ—Å—Ç–∏")
item2 = types.KeyboardButton("–º–∞—Ç—á–∏ –º–æ–µ–π –∫–æ–º–∞–Ω–¥—ã")
item3 = types.KeyboardButton("–º–∞—Ç—á–∏")
item4 = types.KeyboardButton("–°—Ç–∞—Å—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤")
item5 = types.KeyboardButton("–¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã") 
item6 = types.KeyboardButton("–ë–æ–º–±–∞—Ä–¥–∏—Ä—ã") 
item7 = types.KeyboardButton("–°–ª—É—Ö–∏ –æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞—Ö") 
user_main.add(item1, item2, item3, item4, item5, item6, item7)

admin = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("—Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
item2 = types.KeyboardButton("–ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –≤–µ—Ä—Å–∏—é")
admin.add(item1, item2)

znakomstvo = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è")
item2 = types.KeyboardButton("–æ –±–æ—Ç–µ")
znakomstvo.add(item1, item2)

club_key = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("Chelsea")
item2 = types.KeyboardButton("Villarreal")
item3 = types.KeyboardButton("Atletico Madrid")
item4 = types.KeyboardButton("Real Madrid")
item5 = types.KeyboardButton("Barcelona")
item6 = types.KeyboardButton("Sevilla")
item7 = types.KeyboardButton("Manchester City")
item8 = types.KeyboardButton("Manchester United")
item9 = types.KeyboardButton("Liverpool")
item10 = types.KeyboardButton("Bayern Munich")
item11 = types.KeyboardButton("RB Leipzig")
item12 = types.KeyboardButton("Bo Dortmund")
item13 = types.KeyboardButton("VfL Wolfsburg")
item14 = types.KeyboardButton("Inter Milan")
item15 = types.KeyboardButton("Milan")
item16 = types.KeyboardButton("Atalanta")
item17 = types.KeyboardButton("Juventus")
item18 = types.KeyboardButton("Lille")
item19 = types.KeyboardButton("Paris Saint-Germain")
item20 = types.KeyboardButton("Sporting CP")
item21 = types.KeyboardButton("Porto")
item22 = types.KeyboardButton("Zenit Saint Petersburg")
item23 = types.KeyboardButton("Club Brugge")
item24 = types.KeyboardButton("Dynamo Kyiv")
item25 = types.KeyboardButton("Ajax")
item26 = types.KeyboardButton("Besiktas")
club_key.add(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12, item13, item14, item15, item16, item17, item18, item19, item20, item21, item22, item23, item24, item25, item26)

numb = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("1")
item2 = types.KeyboardButton("2")
item3 = types.KeyboardButton("3")
item4 = types.KeyboardButton("4")
item5 = types.KeyboardButton("5")
item6 = types.KeyboardButton("6")
item7 = types.KeyboardButton("7")
item8 = types.KeyboardButton("8")
item9 = types.KeyboardButton("9")
item10 = types.KeyboardButton("10")
numb.add(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10)

yes_no = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–î–∞")
item2 = types.KeyboardButton("–ù–µ—Ç")
yes_no.add(item1, item2)

forgot = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–ü–æ–º–Ω–∏—Ç—å –º–µ–Ω—è")
item2 = types.KeyboardButton("–ó–∞–±—ã—Ç—å –º–µ–Ω—è")
forgot.add(item1, item2)

clock = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è")
item2 = types.KeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫")
clock.add(item1, item2)

maybe_key = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–î–∞")
item2 = types.KeyboardButton("–ù–µ—Ç")
maybe_key.add(item1, item2)


result_of_leage = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
item2 = types.KeyboardButton("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
result_of_leage.add(item1, item2)

leages = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–õ–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤")
item2 = types.KeyboardButton("–õ–∏–≥–∞ –µ–≤—Ä–æ–ø–ø—ã")
item3 = types.KeyboardButton("–ü—Ä–µ–º—å–µ—Ä –ª–∏–≥–∞")
item4 = types.KeyboardButton("–õ–∞ –ª–∏–≥–∞")
item5 = types.KeyboardButton("–°–µ—Ä–∏—è –ê")
leages.add(item1, item2, item3, item4, item5)

with  open(f'photo/lisui_hren.jpg', 'rb') as image_file:
    photo_hren = image_file.read()
with  open(f'photo/macho.jpg', 'rb') as image_file:
    photo_macho = image_file.read()
with  open(f'photo/ya_tebya_vishu.jpg', 'rb') as image_file:
    photo_vishu = image_file.read()
sticker_amazing = 'CAACAgIAAxkBAANiYp30O-zgWy0Oz6Rd8pc491C8z14AAh8AAyShGA73zE1cexljyyQE'
sticker_happy = 'CAACAgIAAxkBAAN_Yp31pFdafimINh64Y-U-XS0bxHUAAi4AAyShGA4LYiBWTaZQuiQE'
sticker_interes = 'CAACAgIAAxkBAAOBYp31qiORAwpjJLbIGC-uj0rpsQgAAikAAyShGA4gRhChGOHkrSQE'

def start_program():
    chat_id_Maksim = 5209538522
    token = 'TOKEN'
    bot = telebot.TeleBot(token)
    
    Kimberg = sqlite3.connect('Kimberg_base.db', check_same_thread=False)
    cursor = Kimberg.cursor()

    list_players = []
    type (list_players)

    @bot.message_handler(commands=['start'])    
    def welcome(message):
        database(message)
        if " " in message.text:
            referrer_candidate = message.text.split()[1]
            if referrer_candidate == 'Admin' and message.chat.id == chat_id_Maksim:
                bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –æ –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω', reply_markup=admin)
            else:
                bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Ä–µ–∫–æ–º–∞–Ω–¥–∞—Ü–∏–µ–π @'+ referrer_candidate)
        info = cursor.execute('SELECT * FROM category_Kimberg WHERE user_id=?', (message.chat.id, )) 
        if info.fetchone() is None:
            bot.send_sticker(message.chat.id, sticker_amazing)
            bot.send_message(message.chat.id, '–û–ø–∞ –∫—Ç–æ –∑–∞—à—ë–ª')
            bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n–Ø - <b>{1.first_name}</b>ü§ñ, –∏ –º—ã –±—É–¥–µ–º –≤–º–µ—Å—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —É—Å–ø–µ—Ö–∞–º–∏ Juventus.\n –ê —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω–µ —Ç–µ—Ä–ø–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.".format(message.from_user, bot.get_me()),
            parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
            bot.send_message(message.chat.id, '–Ø —Ç–∞–∫ —Ä–∞–¥ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n –ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?')
            bot.register_next_step_handler(message, znakomstvo_name)
        else:
            info_user = cursor.execute("select * from `category_Kimberg` WHERE `user_id` = ?", (message.chat.id, ))
            info_user = info_user.fetchall()
            for row in info_user:
                bot.send_photo(message.chat.id, photo_vishu, caption=f'–¢—ã –º–µ–Ω—è —Ä–∞–∑–≤–µ—Å—Ç–∏ –ø—ã—Ç–∞–ª—Å—è? —è –≤—Å—ë –∑–Ω–∞—é –æ —Ç–µ–±–µ\n –¢—ã - {row[2]}\n –ë–æ–ª–µ–µ—à—å –∑–∞ - {row[3]}')
                bot.send_message(message.chat.id, '–ò–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —á—Ç–æ–±—ã —è –¥–µ–ª–∞–ª –≤–∏–¥ —á—Ç–æ —è —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é?', reply_markup=forgot)
                bot.register_next_step_handler(message, forgot_user)

    @bot.message_handler(commands=['help']) 
    def help(message):
        bot.send_message(message.chat.id, "–Ø - <b>{1.first_name}</b>ü§ñ, –∏ –±—ã–≤–∞—é –ø—Ä–∏—Å—Ç–∞–≤—É—á–∏–º –∏–Ω–æ–≥–¥–∞ —Ç–µ–±—è —Å–ø–∞—Å—ë—Ç –∫–æ–º–∞–Ω–¥–∞ /skip, –Ω–æ –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ —Ç–µ–±–µ —Ä–µ—à–∞—Ç—å\n –ê —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω–µ —Ç–µ—Ä–ø–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.".format(message.from_user, bot.get_me()),
            parse_mode='html')

    def forgot_user(message):
        if message.text == '–ü–æ–º–Ω–∏—Ç—å –º–µ–Ω—è':
            bot.send_sticker(message.chat.id, sticker_happy)
            bot.send_message(message.chat.id, '–î—Ä—É–≥–æ–µ –¥–µ–ª–æ —É–¥–∞—á–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏', reply_markup=user_main)
        elif message.text == '–ó–∞–±—ã—Ç—å –º–µ–Ω—è':
            bot.send_photo(message.chat.id, photo_hren,caption='–∞ —Ö—Ä–µ–Ω–∞ —Ç–µ–±–µ –ª—ã—Å–æ–≥–æ', reply_markup=types.ReplyKeyboardRemove())
            time.sleep(10)
            bot.send_message(message.chat.id, '–õ–∞–¥–Ω–æ —è —Å–µ–≥–æ–¥–Ω—è –∏–≥—Ä–∏–≤—ã–π —Ç–∞–∫ —É–∂ –∏ –±—ã—Ç—å —Å–¥–µ–ª–∞—é –≤–∏–¥, —á—Ç–æ –Ω–µ –ø–æ–º–Ω—é –∫—Ç–æ —Ç—ã. –ö–∞–∫ —Ç–µ–±—è –∑–≤–∞—Ç—å?')
            bot.register_next_step_handler(message, znakomstvo_name)
        else:
            bot.send_message(message.chat.id, '–°–ª–∞–±–æ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–ø–∞—Å—Ç—å?')

    def znakomstvo_name(message):
        name = message.text
        if name == '–±–æ–≥' or name == '–≥–æ—Å–ø–æ–¥–∏–Ω' or name == '–≥–µ–Ω–∏–π' or name == '—Ü–∞—Ä—å':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –ø–æ –ø—Ä–æ—â–µ')
            bot.send_photo(message.chat.id, photo_hren, caption='–ª–æ–≤–∏ –¥—è–¥—å–∫—É')
            bot.register_next_step_handler(message, znakomstvo_name)
        else:
            bot.send_message(message.chat.id, '–ó–∞ –∫–∞–∫–æ–π –∫–ª—É–± –±–æ–ª–µ–µ—à—å?', reply_markup=club_key)
            bot.register_next_step_handler(message, znakomstvo_favorite_club, name)

    def znakomstvo_favorite_club(message, name):
        club = message.text
        if club == 'Chelsea' or club == 'Villarreal' or club == 'Atletico Madrid' or club == 'Real Madrid' or club == 'Barcelona' or club == 'Sevilla' or club == 'Manchester City' or club == 'Bayern Munich' or club == 'RB Leipzig' or club == 'Liverpool' or club == 'Bo Dortmund' or club == 'VfL Wolfsburg' or club == 'Inter Milan' or club == 'Milan' or club == 'Atalanta' or club == 'Lille' or club == 'Paris Saint-Germain' or club == 'Sporting CP' or club == 'Porto' or club == 'Zenit Saint Petersburg' or club == 'Club Brugge' or club == 'Dynamo Kyiv' or club == 'Ajax' or club == 'Besiktas' or club == 'Manchester United':
            caption = '–•–æ—Ä–æ—à–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–æ —Ç–µ–ø–µ—Ä—å —Ç—ã –±–æ–ª–µ–µ—à—å –∑–∞ Juventus\n –¢–µ–ø–µ—Ä—å —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫–∞–∫ —Ç–µ–±–µ –º—É–∂–∏–∫ –Ω–∞ —Ñ–æ—Ç–∫–µ?'
            add_base_inform(message, name, club)
            bot.send_photo(message.chat.id, photo_macho, caption=caption, reply_markup=numb)
            bot.register_next_step_handler(message, znakomstvo_yan, name, club)
        elif club == 'Juventus':
            caption = '–ß–µ—Ä–Ω–æ-–±–µ–ª—ã–µ? –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä.\n –¢–µ–ø–µ—Ä—å —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫–∞–∫ —Ç–µ–±–µ –º—É–∂–∏–∫ –Ω–∞ —Ñ–æ—Ç–∫–µ?'
            add_base_inform(message, name, club)
            bot.send_photo(message.chat.id, photo_macho, caption=caption, reply_markup=numb)
            bot.register_next_step_handler(message, znakomstvo_yan, name, club)
        else:
            maybe = difflib.get_close_matches(club, ['Chelsea', 'Villarreal', 'Atletico Madrid', 'Real Madrid', 'Barcelona', 'Sevilla', 'Manchester City', 'Bayern Munich', 'RB Leipzig', 'Liverpool', 'Bo Dortmund', 'VfL Wolfsburg', 'Inter Milan', 'Milan', 'Atalanta', 'Lille', 'Paris Saint-Germain', 'Sporting CP', 'Porto', 'Zenit Saint Petersburg', 'Club Brugge', 'Dynamo Kyiv', 'Ajax', 'Besiktas', 'Manchester United'])
            try:
                maybe = maybe[0]
                bot.send_message(message.chat.id, f'–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É - {maybe}?', reply_markup=maybe_key)
                bot.register_next_step_handler(message, maybe_func, name, club, maybe)
            except:
                bot.send_message(message.chat.id, '–ü—Ñ—Ñ—Ñ —Ç—è–∂–µ–ª—ã–π —Å–ª—É—á–∞–π')
                bot.register_next_step_handler(message, znakomstvo_favorite_club, name)

    def maybe_func(message, name, club, maybe):
        if message.text == '–î–∞':
            caption = '–î–∞ —è –ø—Ä–æ—Å—Ç–æ –≤–∞–Ω–≥–∞\n –¢–µ–ø–µ—Ä—å —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫–∞–∫ —Ç–µ–±–µ –º—É–∂–∏–∫ –Ω–∞ —Ñ–æ—Ç–∫–µ?'
            add_base_inform(message, name, maybe)
            bot.send_photo(message.chat.id, photo_macho, caption=caption, reply_markup=numb)
            bot.register_next_step_handler(message, znakomstvo_yan, name, maybe)
        elif message.text == '–ù–µ—Ç':
            bot.send_message(message.chat.id, '–¢–æ–≥–¥–∞ —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–æ —Ç–µ–ø–µ—Ä—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ', reply_markup=club_key)
            bot.register_next_step_handler(message, znakomstvo_favorite_club, name)
        else:
            bot.send_message(message.chat.id, f'–©–∞—Å –±—ã –≤ 2–∫22 –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–µ –ø–æ–ø–∞—Å—Ç—å')
            bot.register_next_step_handler(message, maybe_func, name, club, maybe)

    def znakomstvo_yan(message, name, club):
        if message.text == '10':
            bot.send_message(message.chat.id, '–∞ –º—ã —Å —Ç–æ–±–æ–π –≤–æ –º–Ω–æ–≥–æ–º —Å–æ–ª–∏–¥–∞—Ä–Ω—ã\n –ü—Ä–æ–¥–æ–ª–∂–∏–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ?', reply_markup=yes_no)
            bot.register_next_step_handler(message, znakomstvo_yes_no, name, club)
        elif message.text == '/skip':
            bot.send_message(message.chat.id, '–ê —Ç—ã —Ö–∏—Ç—ë—Ä, –ª–∞–¥–Ω–æ –¥–µ—Ä–∂–∏ —Å–≤–æ–∏ –∫–Ω–æ–ø–∫–∏', reply_markup=user_main)
        else:
            bot.send_message(message.chat.id, '–ß–æ—Ç –Ω–µ –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ–±—ã —Ç—ã –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É')
            bot.register_next_step_handler(message, znakomstvo_yan, name, club)

    def znakomstvo_yes_no(message, name, club):
        if message.text == '–î–∞':
            bot.send_sticker(message.chat.id, sticker_happy)
            bot.send_message(message.chat.id, '–æ–æ –∫–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ', reply_markup=None)
            bot.send_message(message.chat.id, f'–õ–∞–¥–Ω–æ –Ω–∞ —ç—Ç–æ–º –≤—Å—ë —Ç—ã –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º –º–µ–Ω—é\n —Å–µ–≥–æ–¥–Ω—è —è –æ —Ç–µ–±–µ —É–∑–Ω–∞–ª —á—Ç–æ —Ç–µ–±—è –∑–æ–≤—É—Ç - {name}\n —Ç—ã –±–æ–ª–µ–µ—à—å –∑–∞ - {club}', reply_markup=user_main)
        elif message.text == '–ù–µ—Ç':
            bot.send_message(message.chat.id, '—Ö–∞ –Ω—É –∏ –Ω–∞–¥–µ–π—Å—è –¥–∞–ª—å—à–µ —á—Ç–æ –æ—Ç —Ç–µ–±—è —á—Ç–æ-—Ç–æ –∑–∞–≤–∏—Å–∏—Ç')
            bot.register_next_step_handler(message, znakomstvo_yes_no, name, club)
        elif message.text == '/skip':
            bot.send_message(message.chat.id, '–ê —Ç—ã —Ö–∏—Ç—ë—Ä, –ª–∞–¥–Ω–æ –¥–µ—Ä–∂–∏ —Å–≤–æ–∏ –∫–Ω–æ–ø–∫–∏', reply_markup=user_main)
        else:
            bot.send_message(message.chat.id, '–°–ª–∞–±–æ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–ø–∞—Å—Ç—å?')

    def add_base_inform(message, name, club):
        info = cursor.execute('SELECT * FROM category_Kimberg WHERE user_id=?', (message.chat.id, )) 
        if info.fetchone() is None:
            cursor.execute('INSERT INTO category_Kimberg (user_id, name, favorite_team) VALUES (?, ?, ?)', (message.chat.id, name, club))
            Kimberg.commit()
        else:
            cursor.execute("UPDATE `category_Kimberg` SET `name` = ? WHERE `user_id` = ?", (name, message.chat.id))
            Kimberg.commit()
            cursor.execute("UPDATE `category_Kimberg` SET `favorite_team`  = ? WHERE `user_id` = ?", (club, message.chat.id))
            Kimberg.commit()

    @bot.message_handler(content_types=["text"])
    def text(message): 
        if message.text == '–Ω–æ–≤–æ—Å—Ç–∏':
            numb = random.randint(1, 100)
            if numb == 10:
                bot.send_message(message.chat.id, '–ß–æ—Ç —É—Å—Ç–∞–ª —è –æ—Ç —Ñ—É—Ç–±–æ–ª–∞ —è —Ç–µ–ø–µ—Ä—å –±—É–¥–∏–ª—å–Ω–∏–∫', reply_markup=clock)
                bot.register_next_step_handler(message, back)
            else:
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É', reply_markup=club_key)
                bot.register_next_step_handler(message, news_chois_team)
        elif message.text == '–º–∞—Ç—á–∏ –º–æ–µ–π –∫–æ–º–∞–Ω–¥—ã':
            favorite_team = cursor.execute('SELECT `favorite_team` FROM category_Kimberg WHERE `user_id`=?', (message.chat.id,)) 
            favorite_team = favorite_team.fetchall()[0][0]
            team_link = favorite_team.replace("Atletico Madrid", 'atletico').replace("Real Madrid", 'real').replace("Bayern Munich", 'bayern').replace("Bo Dortmund", 'borussia').replace("VfL Wolfsburg", 'Wolfsburg').replace("Inter Milan", 'Inter').replace("Paris Saint-Germain", 'psg').replace("Sporting CP", 'Sporting').replace("Zenit Saint Petersburg", 'Zenit').replace("Club Brugge", 'brugge-fc').replace("Dynamo Kyiv", 'dynamo-kiev').replace("Ajax", 'ajax-fc').replace("Manchester United", 'mu').replace(" ", '-')
            link = f'https://www.sports.ru/{team_link}/calendar/'
            response = requests.get(link)
            soup = BeautifulSoup(response.text, 'lxml')
            match_of_favoriet_team = []
            table = soup.find('table', attrs={'class':'stat-table'})
            table_body = table.find('tbody')
            rows = table_body.find_all('tr')
            for row in rows:
                cols = row.find_all('td')
                cols = [ele.text.strip() for ele in cols]
                match_of_favoriet_team.append([ele for ele in cols if ele]) 
            for match in match_of_favoriet_team:
                bot.send_message(message.chat.id, f'–î–∞—Ç–∞ - {match[0]}\n–õ–∏–≥–∞ - {match[1]}\n{favorite_team} - {match[2]}, {match[3]}')
        elif message.text == '–º–∞—Ç—á–∏':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ª–∏–≥—É', reply_markup=leages)
            bot.register_next_step_handler(message, leage_chois)
        elif message.text == '–°—Ç–∞—Å—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É', reply_markup=club_key)
            bot.register_next_step_handler(message, statistika_chois)
        elif message.text == '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã':
            link = 'https://www.sports.ru/ucl/transfers/'
            response = requests.get(link)
            soup = BeautifulSoup(response.text, 'lxml')
            transfers = []
            table = soup.find('table', attrs={'class':'transfers-table js-active'})
            table_body = table.find('tbody', attrs={'class':'transfers-table__body'})
            rows = table_body.find_all('tr')
            for row in rows:
                cols = row.find_all('td')
                cols = [ele.text.strip() for ele in cols]
                transfers.append([ele for ele in cols if ele])   
            conter = 0
            while conter != 5:
                transfers[conter][2] = transfers[conter][2].replace("     ",' -> ')
                try:
                    transfers_srok = transfers[conter][4]
                except:
                    transfers_srok = '-'
                bot.send_message(message.chat.id, f'–ù–æ–≤—ã–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä:\n–ò–º—è-{transfers[conter][0]}, –¥–∞—Ç–∞-{transfers[conter][1]}, –ö–æ–º–∞–Ω–¥—ã-{transfers[conter][2]}\n —Ü–µ–Ω–∞-{transfers[conter][3]}\n srok-{transfers_srok}')
                conter = conter + 1
        elif message.text == '–ë–æ–º–±–∞—Ä–¥–∏—Ä—ã':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ª–∏–≥—É', reply_markup=leages)
            bot.register_next_step_handler(message, bombardiers)
        elif message.text == '/skip':
            bot.send_message(message.chat.id, '–ê —Ç—ã —Ö–∏—Ç—ë—Ä, –ª–∞–¥–Ω–æ –¥–µ—Ä–∂–∏ —Å–≤–æ–∏ –∫–Ω–æ–ø–∫–∏', reply_markup=user_main)
        elif message.text == '–°–ª—É—Ö–∏ –æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞—Ö':
            favorite_team = cursor.execute('SELECT `favorite_team` FROM category_Kimberg WHERE `user_id`=?', (message.chat.id,)) 
            favorite_team = favorite_team.fetchall()[0][0]
            team_link = favorite_team.replace("Atletico Madrid", 'atletico').replace("Real Madrid", 'real').replace("Bayern Munich", 'bayern').replace("Bo Dortmund", 'borussia').replace("VfL Wolfsburg", 'Wolfsburg').replace("Inter Milan", 'Inter').replace("Paris Saint-Germain", 'psg').replace("Sporting CP", 'Sporting').replace("Zenit Saint Petersburg", 'Zenit').replace("Club Brugge", 'brugge-fc').replace("Dynamo Kyiv", 'dynamo-kiev').replace("Ajax", 'ajax-fc').replace("Manchester United", 'mu').replace(" ", '-')
            link = f'https://www.sports.ru/{team_link}/'
            response = requests.get(link)
            soup = BeautifulSoup(response.text, 'lxml')
            transfers = soup.find('ul', class_='transfers__list list-reset')
            transfers = transfers.find_all('div', class_='transfers__description')
            for transfer in transfers:
                structer = transfer.find_all('div')
                pozition = structer[0].text
                clubs = structer[1].text
                link = structer[3].a['href']
                bot.send_message(message.chat.id, f'[{pozition}\n{clubs}]({link})', parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, '–∞–≥–∞ —â–∞—Å —Ä–∞–∑–±–µ–∂–∞–ª—Å—è —è —Ç–µ–±–µ –æ—Ç–≤–µ—á–∞—Ç—å')

    def bombardiers(message):
        if message.text == '–õ–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤' or message.text == '–õ–∏–≥–∞ –µ–≤—Ä–æ–ø–ø—ã' or message.text == '–ü—Ä–µ–º—å–µ—Ä –ª–∏–≥–∞' or message.text == '–õ–∞ –ª–∏–≥–∞' or message.text == '–°–µ—Ä–∏—è –ê':
            leage = message.text.replace("–õ–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤", 'Champions-League').replace("–õ–∏–≥–∞ –µ–≤—Ä–æ–ø–ø—ã", 'Europa-League').replace("–ü—Ä–µ–º—å–µ—Ä –ª–∏–≥–∞", 'England/Premier-League').replace("–õ–∞ –ª–∏–≥–∞", 'Spain/LaLiga').replace("–°–µ—Ä–∏—è –ê", 'Italy/Serie-A')
            link = f'https://www.liveresult.ru/football/{leage}/statistics'
            response = requests.get(link)
            soup = BeautifulSoup(response.text, 'lxml')
            player_list = []
            player = soup.find('table', attrs={'class':'maintbl standings-table'})
            player = player.find('tbody')
            rows = player.find_all('tr')
            for row in rows:
                cols = row.find_all('td')
                cols = [ele.text.strip() for ele in cols]
                player_list.append([ele for ele in cols if ele]) 
            bot.send_message(message.chat.id, f'{player_list[0][0]} - {player_list[0][2]}\n–ö–ª—É–± - {player_list[0][1]}\n–ì–æ–ª—ã - {player_list[0][3]}\n–ü–µ–Ω–∞–ª—å—Ç–∏ - {player_list[0][4]}\n–ü–µ—Ä–µ–¥–∞—á–∏ - {player_list[0][5]}')
            bot.send_message(message.chat.id, f'{player_list[1][0]} - {player_list[1][2]}\n–ö–ª—É–± - {player_list[1][1]}\n–ì–æ–ª—ã - {player_list[1][3]}\n–ü–µ–Ω–∞–ª—å—Ç–∏ - {player_list[1][4]}\n–ü–µ—Ä–µ–¥–∞—á–∏ - {player_list[1][5]}')
            bot.send_message(message.chat.id, f'{player_list[2][0]} - {player_list[2][2]}\n–ö–ª—É–± - {player_list[2][1]}\n–ì–æ–ª—ã - {player_list[2][3]}\n–ü–µ–Ω–∞–ª—å—Ç–∏ - {player_list[2][4]}\n–ü–µ—Ä–µ–¥–∞—á–∏ - {player_list[2][5]}')
            bot.send_message(message.chat.id, f'{player_list[3][0]} - {player_list[3][2]}\n–ö–ª—É–± - {player_list[3][1]}\n–ì–æ–ª—ã - {player_list[3][3]}\n–ü–µ–Ω–∞–ª—å—Ç–∏ - {player_list[3][4]}\n–ü–µ—Ä–µ–¥–∞—á–∏ - {player_list[3][5]}')
            bot.send_message(message.chat.id, f'{player_list[4][0]} - {player_list[4][2]}\n–ö–ª—É–± - {player_list[4][1]}\n–ì–æ–ª—ã - {player_list[4][3]}\n–ü–µ–Ω–∞–ª—å—Ç–∏ - {player_list[4][4]}\n–ü–µ—Ä–µ–¥–∞—á–∏ - {player_list[4][5]}')

    def news_chois_team(message):
        club = message.text
        if club == 'Chelsea' or club == 'Villarreal' or club == 'Atletico Madrid' or club == 'Real Madrid' or club == 'Barcelona' or club == 'Sevilla' or club == 'Manchester City' or club == 'Bayern Munich' or club == 'RB Leipzig' or club == 'Liverpool' or club == 'Bo Dortmund' or club == 'VfL Wolfsburg' or club == 'Inter Milan' or club == 'Milan' or club == 'Atalanta' or club == 'Lille' or club == 'Paris Saint-Germain' or club == 'Sporting CP' or club == 'Porto' or club == 'Zenit Saint Petersburg' or club == 'Club Brugge' or club == 'Dynamo Kyiv' or club == 'Ajax' or club == 'Besiktas' or club == 'Manchester United' or club == 'Juventus':
            club = club.replace("Atletico Madrid", 'atletico').replace("Real Madrid", 'real').replace("Bayern Munich", 'bayern').replace("Bo Dortmund", 'borussia').replace("VfL Wolfsburg", 'Wolfsburg').replace("Inter Milan", 'Inter').replace("Paris Saint-Germain", 'psg').replace("Sporting CP", 'Sporting').replace("Zenit Saint Petersburg", 'Zenit').replace("Club Brugge", 'brugge-fc').replace("Dynamo Kyiv", 'dynamo-kiev').replace("Ajax", 'ajax-fc').replace("Manchester United", 'mu').replace(" ", '-')
            link = f'https://www.sports.ru/{club}/'
            response = requests.get(link)
            soup = BeautifulSoup(response.text, 'lxml')
            newses = soup.find('div', class_='newsline')
            newses = newses.find_all('h2', class_='titleH2')
            for news in newses:
                news = news.a
                link = news['href']
                bot.send_message(message.chat.id, f'[{news.text}]({link})', parse_mode='Markdown', reply_markup=user_main)
        else:    
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç')
            bot.register_next_step_handler(message, news_chois_team)

    def back(message):
        bot.send_message(message.chat.id, '–ª–∞–¥–Ω–æ —è –ø–æ—à—É—Ç–∏–ª –¥–µ—Ä–∂–∏ —Å–≤–æ–∏ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ', reply_markup=user_main)

    def leage_chois(message):
        if message.text == '–õ–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤' or message.text == '–õ–∏–≥–∞ –µ–≤—Ä–æ–ø–ø—ã' or message.text == '–ü—Ä–µ–º—å–µ—Ä –ª–∏–≥–∞' or message.text == '–õ–∞ –ª–∏–≥–∞' or message.text == '–°–µ—Ä–∏—è –ê':
            leage = message.text.replace("–õ–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤", 'ucl').replace("–õ–∏–≥–∞ –µ–≤—Ä–æ–ø–ø—ã", 'liga-europa').replace("–ü—Ä–µ–º—å–µ—Ä –ª–∏–≥–∞", 'epl').replace("–õ–∞ –ª–∏–≥–∞", 'la-liga').replace("–°–µ—Ä–∏—è –ê", 'seria-a')
            link = f'https://www.sports.ru/{leage}/calendar/'
            response = requests.get(link)
            soup = BeautifulSoup(response.text, 'lxml')
            match_list = []
            info = soup.find('div', attrs={'class':'mainPart columns-layout__main js-active'})
            info = info.find_all('table')
            for inf in info:
                rows = inf.find_all('tr')
                for row in rows:
                    cols = row.find_all('td')
                    cols = [ele.text.strip() for ele in cols]
                    match_list.append([ele for ele in cols if ele]) 
            for match in match_list:
                if match[2] == '- : -':
                    bot.send_message(message.chat.id, f'–î–∞—Ç–∞ - {match[0]}, {match[1]} - {match[3]}', reply_markup=user_main)

    def statistika_chois(message):
        club = message.text
        if club == 'Chelsea' or club == 'Villarreal' or club == 'Atletico Madrid' or club == 'Real Madrid' or club == 'Barcelona' or club == 'Sevilla' or club == 'Manchester City' or club == 'Bayern Munich' or club == 'RB Leipzig' or club == 'Liverpool' or club == 'Bo Dortmund' or club == 'VfL Wolfsburg' or club == 'Inter Milan' or club == 'Milan' or club == 'Atalanta' or club == 'Lille' or club == 'Paris Saint-Germain' or club == 'Sporting CP' or club == 'Porto' or club == 'Zenit Saint Petersburg' or club == 'Club Brugge' or club == 'Dynamo Kyiv' or club == 'Ajax' or club == 'Besiktas' or club == 'Manchester United' or club == 'Juventus':
            club = club.replace("Atletico Madrid", 'atletico').replace("Real Madrid", 'real').replace("Bayern Munich", 'bayern').replace("Bo Dortmund", 'borussia').replace("VfL Wolfsburg", 'Wolfsburg').replace("Inter Milan", 'Inter').replace("Paris Saint-Germain", 'psg').replace("Sporting CP", 'Sporting').replace("Zenit Saint Petersburg", 'Zenit').replace("Club Brugge", 'brugge-fc').replace("Dynamo Kyiv", 'dynamo-kiev').replace("Ajax", 'ajax-fc').replace("Manchester United", 'mu').replace(" ", '-')
            statistika_player(message, club)
        else:
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç')
            bot.register_next_step_handler(message, statistika_chois)

    def statistika_player(message, club):
            link = f'https://www.sports.ru/{club}/stat/2021-2022/'  #–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω
            response = requests.get(link)
            soup = BeautifulSoup(response.text, 'lxml')
            field = soup.find('table', class_='stat-table sortable-table js-active')
            names = field.find_all('a', class_='name')
            players_key = types.ReplyKeyboardMarkup(resize_keyboard=True)
            players_fieald = {}
            for name in names:
                item = types.KeyboardButton(name.text)
                players_key.add(item)
                players_fieald[name.text.replace(" ", '')] = name['href']
            vratari = soup.find('table', class_='stat-table js-active')
            names = vratari.find_all('a', class_='name')
            players_vratari = {}
            for name in names:
                item = types.KeyboardButton(name.text)
                players_key.add(item)
                players_vratari[name.text.replace(" ", '')] = name['href']
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞', reply_markup=players_key)
            bot.register_next_step_handler(message, statistika_player_send, players_fieald, players_vratari)

    def statistika_player_send(message, players_fieald, players_vratari):
        try:
            link = players_fieald[message.text.replace(" ", '')]
            player = '–ü–æ–ª–µ–≤–æ–π'
        except:
            link = players_vratari[message.text.replace(" ", '')]
            player = '–í—Ä–∞—Ç–∞—Ä—å'
        response = requests.get(link)
        soup = BeautifulSoup(response.text, 'lxml')
        player_info = soup.find('table', class_='profile-table').text.strip().replace("\n\r\n", ' - ').replace("\r\n|\r\n", ' | ').replace("\r\n\n\n\n", '\n').replace("\n\n ", ' - ').replace("\r\n\n\n\n", '\n').replace("\n\n\xa0", ' - ').replace("\r\n - - ", '\n').replace("\r\n - ", ' - ')
        player_photo = soup.find('div', class_='img-box').img['src']
        bot.send_photo(message.chat.id, player_photo, caption=player_info)
        data_sezon = []
        data_carier = []
        table = soup.find('table', attrs={'class':'stat-table career'})
        table_body = table.find('tbody')
        rows = table_body.find_all('tr')
        for row in rows:
            cols = row.find_all('td')
            cols = [ele.text.strip() for ele in cols]
            data_sezon.append([ele for ele in cols if ele]) 
        table_body = table.find('tfoot')
        rows = table_body.find_all('tr')
        for row in rows:
            cols = row.find_all('td')
            cols = [ele.text.strip() for ele in cols]
            data_carier.append([ele for ele in cols if ele])      
        seazon_yaer = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for row in data_sezon:
            if row[0] != '–°–µ–∑–æ–Ω':
                item = types.KeyboardButton(row[0])
                seazon_yaer.add(item)
        for row in data_carier:
            if row[0] != '–°–µ–∑–æ–Ω':
                bot.send_message(message.chat.id, f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∫–∞—Ä—å–µ—Ä—É\n{row[0]}\n–ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ - ({row[1]}), —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–µ - ({row[8]}),\n –ó–∞–±–∏–ª –≥–æ–ª–æ–≤ - ({row[2]}), –ó–∞–±–∏–ª –ø–µ–Ω–∞–ª—å—Ç–∏ - ({row[3]}),\n –ì–æ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–¥–∞—á - ({row[4]}), –≥–æ–ª + –ø–∞—Å - ({row[5]}),\n –ñ–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ - ({row[6]}), –ö—Ä–∞—Å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ - ({row[7]})', reply_markup=user_main)        
        bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω', reply_markup=seazon_yaer)
        bot.register_next_step_handler(message, plaer_seazon, data_sezon, player)
      
    def plaer_seazon(message, data_sezon, player):
        for row in data_sezon:
            if row[0] == message.text:
                if player == '–ü–æ–ª–µ–≤–æ–π':
                    bot.send_message(message.chat.id, f'–°–µ–∑–æ–Ω - {row[0]}\n–ö–æ–º–∞–Ω–¥–∞ - {row[1]}\n–¢—É—Ä–∏–Ω—Ä - {row[2]}\n –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ - ({row[3]}), —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–µ - ({row[10]}),\n –ó–∞–±–∏–ª –≥–æ–ª–æ–≤ - ({row[4]}), –ó–∞–±–∏–ª –ø–µ–Ω–∞–ª—å—Ç–∏ - ({row[5]}),\n –ì–æ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–¥–∞—á - ({row[6]}), –≥–æ–ª + –ø–∞—Å - ({row[7]}),\n –ñ–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ - ({row[8]}), –ö—Ä–∞—Å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ - ({row[9]})', reply_markup=user_main)
                elif player == '–í—Ä–∞—Ç–∞—Ä—å':
                     bot.send_message(message.chat.id, f'–°–µ–∑–æ–Ω - {row[0]}\n–ö–æ–º–∞–Ω–¥–∞ - {row[1]}\n–¢—É—Ä–∏–Ω—Ä - {row[2]}\n –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ - ({row[3]}), —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–µ - ({row[15]}),\n –ó–∞–±–∏–ª –≥–æ–ª–æ–≤ - ({row[4]}), –ó–∞–±–∏–ª –ø–µ–Ω–∞–ª—å—Ç–∏ - ({row[5]}),\n –ì–æ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–¥–∞—á - ({row[6]}),\n –ñ–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ - ({row[7]}), –ö—Ä–∞—Å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ - ({row[8]}), –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ–≤ - ({row[9]}), –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ–≤ - ({row[10]}), –°—É—Ö–∏—Ö –º–∞—Ç—á–µ–π - ({row[11]}), –í—ã–π–≥—Ä—ã—à–µ–π - ({row[12]}), –ù–∏—á—å–∏ - ({row[13]}), –ü–æ—Ä–∞–∂–µ–Ω–∏–π - ({row[14]})', reply_markup=user_main)

    def transfers_auto():
        link = 'https://www.sports.ru/ucl/transfers/'
        response = requests.get(link)
        soup = BeautifulSoup(response.text, 'lxml')
        transfers = []
        table = soup.find('table', attrs={'class':'transfers-table js-active'})
        table_body = table.find('tbody', attrs={'class':'transfers-table__body'})
        rows = table_body.find_all('tr')
        for row in rows:
            cols = row.find_all('td')
            cols = [ele.text.strip() for ele in cols]
            transfers.append([ele for ele in cols if ele])    
        for transfer in transfers:
            transfer[2] = transfer[2].replace("     ",' -> ')
            try:
                transfers_srok = transfer[4]
            except:
                transfers_srok = '-'
            info = cursor.execute('SELECT * FROM Transfers WHERE `name`=? AND `date`=? AND `teams`=? AND `prise`=? AND `srok`=?', (transfer[0], transfer[1], transfer[2], transfer[3], transfers_srok)) 
            if info.fetchone() is None:
                dt = datetime.datetime.now() 
                dt = dt.strftime(dt.strftime("Day: %d/%m/%Y  time: %H:%M:%S")) 
                cursor.execute('INSERT INTO Transfers (name, date, teams, prise, srok, datatime) VALUES (?, ?, ?, ?, ?, ?)', (transfer[0], transfer[1], transfer[2], transfer[3], transfers_srok, dt))
                Kimberg.commit()
                rassilka(transfer[0], transfer[1], transfer[2], transfer[3], transfers_srok)

    def rassilka(transfers_name, transfers_date, transfers_team, transfers_prise, transfers_srok):
        users = cursor.execute("select `user_id` from `category_Kimberg`")
        users = users.fetchall()
        numb = len(users)
        start_numb = 0
        while start_numb!=numb:
            try:
                bot.send_message(users[start_numb][0], f'–ù–æ–≤—ã–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä:\n–ò–º—è-{transfers_name}, –¥–∞—Ç–∞-{transfers_date}, –ö–æ–º–∞–Ω–¥—ã-{transfers_team}\n —Ü–µ–Ω–∞-{transfers_prise}\n srok-{transfers_srok}')
            except:
                bot.send_message(chat_id_Maksim, f'–î–æ–±–∞–≤–∏–ª –≤ —á—Å - {users[start_numb][0]}')
            start_numb = start_numb + 1

    @bot.message_handler(content_types=["sticker"])
    def sticker(message):
        file_id = message.sticker.file_id
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä –º–æ–ª–æ–¥–µ—Ü, –º–Ω–µ —Ç–æ —Å –Ω–∏–º —á—Ç–æ –¥–µ–ª–∞—Ç—å? –Ω—É –¥–µ—Ä–∂–∏ –æ–±—Ä–∞—Ç–Ω–æ')
        bot.send_sticker(message.chat.id, file_id)
    
    @bot.message_handler(content_types=["voice"])
    def voice(message):
        file_id = message.voice.file_id
        bot.send_message(message.chat.id, '–ê –Ω—É —è –ø—Ä—è–º –≤ –∫—É—Ä—Å–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –≥—Å, —è –∂–∞–ª–æ–≤–∞—Ç—å—Å—è –∞–¥–º–∏–Ω—É')
        bot.send_voice(message.chat.id, file_id)
    
    @bot.message_handler(content_types=["video"])
    def video(message):
        file_id = message.video.file_id
        bot.send_message(message.chat.id, '–ø—Ä–æ—Å—Ç–æ –∏–¥–∏ –≤ –∂–æ–ø—É')
        bot.send_video(message.chat.id, file_id)    

    @bot.message_handler(content_types=["photo"])
    def photo(message):
        file_id = message.photo[0].file_id
        bot.send_message(message.chat.id, '–û–ø–∞ –ø–æ—Å—Ç–∞–≤–ª—é —Å–µ–±–µ –Ω–∞ –∞–≤–∞—Ç—Ä–∫—É')
        bot.send_photo(message.chat.id, file_id)

    def database(message): 
        us_id = message.from_user.id 
        info = cursor.execute('SELECT * FROM users_Kimberg WHERE user_id=?', (us_id, )) 
        if info.fetchone() is None:      
            dt = datetime.datetime.now() 
            dt = dt.strftime(dt.strftime("Day: %d/%m/%Y  time: %H:%M:%S"))           
            us_name = message.from_user.first_name
            us_sname = message.from_user.last_name
            username = message.from_user.username
            database_add(user_id=us_id, user_name=us_name, user_surname=us_sname, username=username, datetime=dt) 
        
    def database_add(user_id: int, user_name: str, user_surname: str, username: str, datetime: str):
        cursor.execute('INSERT INTO users_Kimberg (user_id, user_name, user_surname, username, datetime) VALUES (?, ?, ?, ?, ?)', (user_id, user_name, user_surname, username, datetime))
        Kimberg.commit()


    def target_time(): 
        schedule.every(10).minutes.do(transfers_auto)
        while True:
            schedule.run_pending()
            time.sleep(1)

    thread = Thread(target=target_time)
    thread.start()

    bot.polling()

start_program()